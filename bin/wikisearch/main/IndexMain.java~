package wikisearch.main;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;

import wikisearch.merger.Merger;
import wikisearch.parser.ParsingXML;

public class IndexMain {
	public static void main(String args[])
	{
		//String uri = "E:\\Dropbox\\dump\\sample\\sample.xml";
		//String uri1 = "E:\\Dropbox\\dump\\sample";
		String uri = new String();
		String uri1 = new String();
		try{
			uri = args[0];
			uri1 = args[1];
		}
		catch(ArrayIndexOutOfBoundsException e){
			System.out.println("EXCEPTION : Command Line Arguments are Missing.");
			return;
		}
		
		ParsingXML parse = new ParsingXML();
		long fnum = 0;
		
		double startTime = System.currentTimeMillis();
		
		fnum = parse.parseMethod(uri,uri1);
		//parse.mapidTitleCreate();
		//System.out.println(fnum);
		System.out.println("MERGING of " + fnum + " FILES STARTS....");
		
		if(fnum > 1){			
			Merger mg = new Merger();
			mg.mergingFunc(uri1, fnum);
		}
		else
		{
			try {
				copyFile(new File(uri1+"\\file_1"), new File(uri1+"\\finalindex"));
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		double endTime   = System.currentTimeMillis();
		double totalTime = endTime - startTime;
		System.out.println("RUNNING TIME FOR INDEX CREATION : "+ totalTime/1000 + " sec");
		//deleteDirectory(new File(uri1+"\\FILE"));
		//System.out.println(true);
		return;
		
	}
	private static void copyFile(File source, File dest)
	       throws IOException {
		    FileChannel inputChannel = null;
		    FileChannel outputChannel = null;
		    try {
		        inputChannel = new FileInputStream(source).getChannel();
		        outputChannel = new FileOutputStream(dest).getChannel();
		        outputChannel.transferFrom(inputChannel, 0, inputChannel.size());
		    } finally {
		        inputChannel.close();
		        outputChannel.close();
		    }
		}

	public static boolean deleteDirectory(File directory) {
	    if(directory.exists()){
	        File[] files = directory.listFiles();
	        if(null!=files){
	            for(int i=0; i<files.length; i++) {
	                if(files[i].isDirectory()) {
	                    deleteDirectory(files[i]);
	                }
	                else {
	                    files[i].delete();
	                }
	            }
	        }
	    }
	    return(directory.delete());
	}
}
